#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ДобавитьТестовыйНабор("Движение товаров: расход товаров").ВТранзакции()
	.ДобавитьТест("ПроверкаПроведенияПозитив", "Проведение расходной накладной с контролем движений", "Позитив, Task-5, Евгений Клишев")
	.ДобавитьТест("ПроверкаПроведенияНегатив", "Проведение расходной накладной превышение остатков", "Негатив, Task-5, Евгений Клишев")
	;
	
КонецПроцедуры

Процедура ПроверкаПроведенияПозитив() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
#Область подготовкаданных
	
	// Создание товара
	ТоварНовый = СозданияТовара("Test_Хлеб");
	
	// Создание прихода
	Цена = 10;
	Количество = 5;
	Сумма = 50;
	ПриходТовара = СозданиеДокументаПриход(ТоварНовый, Цена, Количество, Сумма);
	
	// Создание расхода
	РасходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
	.ФикцияОбязательныхПолей()
	.Установить("Дата", ТекущаяДатаСеанса())
	.Установить("Склад", ПриходТовара.Склад)
	.Установить("Валюта", ПриходТовара.Валюта)
	.Установить("Покупатель", ПриходТовара.Поставщик)
	.Установить("Организация", ПриходТовара.Организация)
	.ФикцияРеквизитов("ВидЦен, ОбоснованиеОтгрузки")
	.ТабличнаяЧасть("Товары").ДобавитьСтроку()
	.Установить("Товар", ТоварНовый)
	.Установить("Цена", Цена)
	.Установить("Количество", Количество)
	.Установить("Сумма", Сумма)
	.Записать() // формируем документ ссылку не проведенную
	;
	
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	#КонецОбласти	

	ЮТест.ОжидаетЧто(РасходТовара.ПолучитьОбъект())  // Объект, метод которого проверяем
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
	.НеВыбрасываетИсключение()	
	;
	
	Движения = ЮТЗапросы.ДвиженияДокумента(РасходТовара, "ТоварныеЗапасы");
	
	ЮТест.ОжидаетЧто(Движения)
	.Заполнено()
	.ИмеетДлину(РасходТовара.Товары.Количество())
	.КаждыйЭлементСоответствуетПредикату(
	ЮТест.Предикат()
	.Реквизит("ВидДвижения").Равно(ВидДвиженияНакопления.Расход)
	.Реквизит("Количество").Больше(0));
	
	Движения = ЮТЗапросы.ДвиженияДокумента(РасходТовара, "Взаиморасчеты");
	
	ЮТест.ОжидаетЧто(Движения)
	.Заполнено()
	.ИмеетДлину(РасходТовара.Товары.Количество())
	.КаждыйЭлементСоответствуетПредикату(
	ЮТест.Предикат()
	.Реквизит("ВидДвижения").Равно(ВидДвиженияНакопления.Расход)
	.Реквизит("Сумма").Больше(0));  
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.Взаиморасчеты.Остатки";
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("СуммаОстаток"); 
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Контрагент");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Валюта");
	ОписаниеЗапроса.Условия.Добавить("Контрагент = &Контрагент");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Контрагент", РасходТовара.Покупатель);
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", РасходТовара.Валюта);
	Результат = ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса);
	
	ЮТест.ОжидаетЧто(Результат)
	.НеЗаполнено("Проверка вывода в ноль взаиморасчетов");
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварныеЗапасы.Остатки";
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток"); 
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Товар");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Склад");
	ОписаниеЗапроса.Условия.Добавить("Товар = &Товар");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Товар", ТоварНовый);
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", РасходТовара.Склад);
	Результат = ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса);
	
	ЮТест.ОжидаетЧто(Результат)
	.НеЗаполнено("Проверка вывода в ноль остатков");

КонецПроцедуры

Процедура ПроверкаПроведенияНегатив() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	// Создание товара
	ТоварНовый = СозданияТовара("Test_Хлеб");
	
	// Создание прихода
	Цена = 10;
	Количество = 10;
	Сумма = 50;
	ПриходТовара = СозданиеДокументаПриход(ТоварНовый, Цена, Количество, Сумма);
	
	// Создание расхода
	РасходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
	.ФикцияОбязательныхПолей()
	.Установить("Дата", ТекущаяДатаСеанса())
	.Установить("Склад", ПриходТовара.Склад)
	.Установить("Валюта", ПриходТовара.Валюта)
	.Установить("Организация", ПриходТовара.Организация)
	.ФикцияРеквизитов("Покупатель, ВидЦен, ОбоснованиеОтгрузки")
	.ТабличнаяЧасть("Товары").ДобавитьСтроку()
	.Установить("Товар", ТоварНовый)
	.Установить("Цена", Цена)
	.Установить("Количество", 17) // Кол-во заведомо больше прихода, который равен 5
	.Установить("Сумма", Сумма)
	.Записать()
	;
		
	// Проверка метода проведения, в случае выполнения кода: 
	//РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	//
	ЮТест.ОжидаетЧто(РасходТовара.ПолучитьОбъект())  // Объект, метод которого проверяем
	.Метод("Записать",  ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) // Указываем проверяемый метод и параметры вызова
	.ВыбрасываетИсключение("Не удалось провести ""Продажа")	
	;
	
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
	.ИмеетТип("ФиксированныйМассив")
	.ИмеетДлину(1)
	.Свойство("[0].Текст")
	.ИмеетТип("Строка")
	.Содержит("Не хватает 7 единиц товара""Test_Хлеб""")
	;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СозданияТовара(Наименование)
	
	// Создание товара с видом Товар
	//ТоварНовый = ЮТест.Данные().СоздатьЭлемент("Справочники.Товары");   - не подойдет, т.к. не можем отрегулировать вид товара
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
	.ФикцияОбязательныхПолей()
	.Установить("Вид", Перечисления.ВидыТоваров.Товар)
	.Установить("Наименование", Наименование)
	;
	ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;
	
КонецФункции

Функция СозданиеДокументаПриход(ТоварНовый, Цена, Количество, Сумма)
	
	// Создание прихода
	КонструкторПрихода = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
	.ФикцияОбязательныхПолей()
	.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
	.Установить("Дата", ТекущаяДатаСеанса() - 100)
	.ТабличнаяЧасть("Товары").ДобавитьСтроку()
	.Установить("Товар", ТоварНовый)
	.Установить("Цена", Цена)
	.Установить("Количество", Количество)
	.Установить("Сумма", Сумма)
	;
	
	ПриходТовара = КонструкторПрихода.Провести();  // формируем документ ссылку проведененную
	
	Возврат ПриходТовара;
	
КонецФункции 

#КонецОбласти