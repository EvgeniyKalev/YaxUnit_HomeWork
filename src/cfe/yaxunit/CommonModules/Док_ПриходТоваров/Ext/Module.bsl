#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ДобавитьТестовыйНабор("Движение товаров: приход товаров").ВТранзакции()
	.ДобавитьТест("СозданиеПриходнойНакладной1Позитив", "Создание приходной накладной", "Позитив, Task-1, Евгений Клишев")
	.ДобавитьТест("СозданиеПриходнойНакладной1Негатив", "Создание приходной накладной не проведен", "Негатив, Task-1, Евгений Клишев")
	.ДобавитьТест("СозданиеПриходнойНакладной2Позитив", "Создание приходной накладной", "Позитив, Task-2, Евгений Клишев")
	.ДобавитьТест("СозданиеПриходнойНакладной2Негатив", "Создание приходной накладной организация не заполнена", "Негатив, Task-2, Евгений Клишев")
	.ДобавитьТест("СозданиеПриходнойНакладной3Позитив", "Создание приходной накладной", "Позитив, Task-3, Евгений Клишев")
	.ДобавитьТест("СозданиеПриходнойНакладной3Негатив", "Создание приходных накладных отрицательные значения", "Негатив, Task-3, Евгений Клишев") 
	.ДобавитьТест("ПроведениеПриходнойНакладной1Позитив", "Проверка проведен и содержит движения", "Позитив, Task-4, Евгений Клишев")
	.ДобавитьТест("ПроведениеПриходнойНакладной1Негатив", "Проверка проведен и движения количество 0", "Негатив, Task-4, Евгений Клишев")
	;

КонецПроцедуры

Процедура СозданиеПриходнойНакладной1Позитив() Экспорт
	
	// Создание товара
	ТоварНовый = СозданияТовара("Test1_Хлеб");
		
	// Создание прихода
	Цена = 10;
	Количество = 5;
	Сумма = 50;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;
		
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.ИмеетТип("ДокументОбъект.ПриходТовара")
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Запись)   // Указываем проверяемый метод и параметры вызова
	.Свойство("Номер").Заполнено()
	.Свойство("Дата").Заполнено()
	.Свойство("Товары").ИмеетДлину(1)
	.Свойство("Товары[0].Товар").Равно(ТоварНовый)
	.Свойство("Товары[0].Цена").Больше(0)
	.Свойство("Товары[0].Количество").Больше(0)
	.Свойство("Товары[0].Сумма").Равно(50)
	.Свойство("Проведен").ЭтоЛожь()
	;

КонецПроцедуры 

Процедура СозданиеПриходнойНакладной1Негатив() Экспорт
	
	// Создание товара
	ТоварНовый = СозданияТовара("Test1_Хлеб");
		
	// Создание прихода
	Цена = 10;
	Количество = 5;
	Сумма = 50;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;
		
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.ИмеетТип("ДокументОбъект.ПриходТовара")
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
	.Свойство("Номер").Заполнено()
	.Свойство("Дата").Заполнено()
	.Свойство("Товары").ИмеетДлину(1)
	.Свойство("Товары[0].Товар").Равно(ТоварНовый)
	.Свойство("Товары[0].Цена").Больше(0)
	.Свойство("Товары[0].Количество").Больше(0)
	.Свойство("Товары[0].Сумма").Равно(50)
	.Свойство("Проведен").ЭтоЛожь()
	;

КонецПроцедуры 

Процедура СозданиеПриходнойНакладной2Позитив() Экспорт
	
		// Создание товара
	ТоварНовый = СозданияТовара("Test2_Хлеб");
		
	// Создание прихода
	Цена = 10;
	Количество = 5;
	Сумма = 50;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;
		
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.ИмеетТип("ДокументОбъект.ПриходТовара")
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Запись)   // Указываем проверяемый метод и параметры вызова
	.Свойство("Номер").Заполнено()
	.Свойство("Дата").Заполнено()
	.Свойство("Товары").ИмеетДлину(1)
	.Свойство("Товары[0].Товар").Равно(ТоварНовый)
	.Свойство("Товары[0].Цена").Больше(0)
	.Свойство("Товары[0].Количество").Больше(0)
	.Свойство("Товары[0].Сумма").Равно(50)
	.Свойство("Проведен").ЭтоЛожь()
	;

КонецПроцедуры 

Процедура СозданиеПриходнойНакладной2Негатив() Экспорт
	
	// Создание товара
	ТоварНовый = СозданияТовара("Test2_Хлеб");
		
	// Создание прихода
	Цена = 10;
	Количество = 5;
	Сумма = 50;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		//.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;
		
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.ИмеетТип("ДокументОбъект.ПриходТовара")
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
	.Свойство("Номер").Заполнено()
	.Свойство("Дата").Заполнено()
	.Свойство("Организация").НеЗаполнено()
	.Свойство("Товары").ИмеетДлину(1)
	.Свойство("Товары[0].Товар").Равно(ТоварНовый)
	.Свойство("Товары[0].Цена").Больше(0)
	.Свойство("Товары[0].Количество").Больше(0)
	.Свойство("Товары[0].Сумма").Равно(50)
	.Свойство("Проведен").ЭтоЛожь()
	;
КонецПроцедуры 

Процедура СозданиеПриходнойНакладной3Позитив() Экспорт
		// Создание товара
	ТоварНовый = СозданияТовара("Test3_Хлеб");
		
	// Создание прихода
	Цена = 10;
	Количество = 5;
	Сумма = 50;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;
		
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.ИмеетТип("ДокументОбъект.ПриходТовара")
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Запись)   // Указываем проверяемый метод и параметры вызова
	.Свойство("Номер").Заполнено()
	.Свойство("Дата").Заполнено()
	.Свойство("Товары").ИмеетДлину(1)
	.Свойство("Товары[0].Товар").Равно(ТоварНовый)
	.Свойство("Товары[0].Цена").Больше(0)
	.Свойство("Товары[0].Количество").Больше(0)
	.Свойство("Товары[0].Сумма").Равно(50)
	.Свойство("Проведен").ЭтоЛожь()
	;

КонецПроцедуры 

Процедура СозданиеПриходнойНакладной3Негатив() Экспорт
	
	// Создание товара
	ТоварНовый = СозданияТовара("Test3_Хлеб");
		
	// Создание прихода
	Цена = -10;
	Количество = -5;
	Сумма = -50;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;
		
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	
	
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.ИмеетТип("ДокументОбъект.ПриходТовара")
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
	.Свойство("Номер").Заполнено()
	.Свойство("Дата").Заполнено()
	.Свойство("Товары").ИмеетДлину(1)
	.Свойство("Товары[0].Товар").Равно(ТоварНовый)
	.Свойство("Товары[0].Цена").Равно(0)
	.Свойство("Товары[0].Количество").Равно(0)
	.Свойство("Товары[0].Сумма").Равно(0)
	.Свойство("Проведен").ЭтоЛожь()
	;

КонецПроцедуры 

Процедура ПроведениеПриходнойНакладной1Позитив() Экспорт

	// Создание товара
	ТоварНовый = СозданияТовара("Test4_Хлеб");
		
	// Создание прихода
	Цена = 10;
	Количество = 5;
	Сумма = 50;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;

		// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	//ПриходТоваров.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
	.НеВыбрасываетИсключение()	
	;
	
	Движения = ЮТЗапросы.ДвиженияДокумента(ПриходТоваров, "ТоварныеЗапасы");
	
	ЮТест.ОжидаетЧто(Движения)
	.Заполнено()
	.ИмеетДлину(ПриходТоваров.Товары.Количество())
	.КаждыйЭлементСоответствуетПредикату(
	ЮТест.Предикат()
	.Реквизит("ВидДвижения").Равно(ВидДвиженияНакопления.Приход)
	.Реквизит("Количество").Больше(0));
	
КонецПроцедуры 

Процедура ПроведениеПриходнойНакладной1Негатив() Экспорт
	
	// Создание товара
	ТоварНовый = СозданияТовара("Test4_Хлеб");
		
	// Создание прихода
	Цена = 10;
	Количество = 0;
	Сумма = 0;
	
	// Создание прихода
	ПриходТоваров = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов("Поставщик, Склад, Валюта, Организация")
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", ТоварНовый)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество)
			.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
		;
		
	// Проверка метода проведения, в случае выполнения: РасходТовара.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение)
	// Описание проверки метода: https://bia-technologies.github.io/yaxunit/docs/features/assertions/assertions-base#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0
	//ПриходТоваров.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	ЮТест.ОжидаетЧто(ПриходТоваров.ПолучитьОбъект())  // Объект, метод которого проверяем
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
	.НеВыбрасываетИсключение()	
	;
	
	Движения = ЮТЗапросы.ДвиженияДокумента(ПриходТоваров, "ТоварныеЗапасы");
	
	ЮТест.ОжидаетЧто(Движения)
	.Заполнено()
	.ИмеетДлину(ПриходТоваров.Товары.Количество())
	.КаждыйЭлементСоответствуетПредикату(
	ЮТест.Предикат()
	.Реквизит("ВидДвижения").Равно(ВидДвиженияНакопления.Приход)
	.Реквизит("Количество").Равно(0));

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СозданияТовара(Наименование)
	
	// Создание товара с видом Товар
	//ТоварНовый = ЮТест.Данные().СоздатьЭлемент("Справочники.Товары");   - не подойдет, т.к. не можем отрегулировать вид товара
		
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
		.ФикцияОбязательныхПолей()
		.Установить("Вид", Перечисления.ВидыТоваров.Товар)
		.Установить("Наименование", Наименование)
		;
    ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

#КонецОбласти